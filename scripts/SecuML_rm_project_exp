#!/usr/bin/python3

# SecuML
# Copyright (C) 2016-2019  ANSSI
#
# SecuML is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# SecuML is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with SecuML. If not, see <http://www.gnu.org/licenses/>.

import argparse
import os.path as path
import shutil
import sys

from secuml.core.tools.color import display_in_green
from secuml.core.tools.color import display_in_red
from secuml.core.tools.core_exceptions import SecuMLcoreException
from secuml.exp import experiment
from secuml.exp.active_learning import ActiveLearningExp  # NOQA
from secuml.exp.active_learning import RcdExp  # NOQA
from secuml.exp.conf.secuml import SecuMLConf
from secuml.exp.data.project_dataset import rm_project_from_db
from secuml.exp.diadem import DiademExp  # NOQA
from secuml.exp.clustering import ClusteringExperiment  # NOQA
from secuml.exp.features_analysis import FeaturesAnalysisExperiment  # NOQA
from secuml.exp.projection import ProjectionExperiment  # NOQA
from secuml.exp.tools.exp_exceptions import SecuMLexpException


def delete_exp(session, exp_id):
    exp = experiment.get_factory().from_exp_id(args.exp_id, secuml_conf,
                                               session)
    exp.remove()
    print(display_in_green('\nThe experiment %d has been successfully '
                           'deleted.\n' % args.exp_id))


def delete_project(session, project):
    rm_project_from_db(session, args.project)
    shutil.rmtree(path.join(secuml_conf.output_data_dir, args.project))
    print(display_in_green('\nThe project %s has been successfully '
                           'deleted.\n' % args.project))


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Delete all the experiments of a project, '
                    'or a given experiment.')
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('--project', help='the name of the project to delete')
    group.add_argument('--exp-id', type=int,
                       help='the id of the experiment to delete')
    parser.add_argument('--secuml-conf', type=str, default=None,
                        help='YAML file containing the configuration. '
                             'If not set, the configuration is read from the'
                             'file stored in the environment variable '
                             'SECUMLCONF.')
    args = parser.parse_args()
    try:
        secuml_conf = SecuMLConf(args.secuml_conf)
        session = secuml_conf.Session()
        if args.exp_id is not None:
            delete_exp(session, args.exp_id)
        else:
            delete_project(session, args.project)
        session.commit()
        session.close()
    except (SecuMLcoreException, SecuMLexpException) as e:
        sys.stderr.write(display_in_red(e) + '\n')
        session.rollback()
        session.close()
        sys.exit(-1)
    except Exception as e:
        session.rollback()
        session.close()
        raise(e)
