#!/usr/bin/python2

## SecuML
## Copyright (C) 2016-2017  ANSSI
##
## SecuML is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2 of the License, or
## (at your option) any later version.
##
## SecuML is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License along
## with SecuML. If not, see <http://www.gnu.org/licenses/>.

import argparse
import matplotlib
matplotlib.use('Agg')
import sys

from SecuML import db_tables
from SecuML.ActiveLearning.Configuration import ActiveLearningConfFactory
from SecuML.ActiveLearning.Configuration.ActiveLearningConfiguration import InvalidInputArguments
from SecuML.ActiveLearning.Iterations import Iterations
from SecuML.Data.Dataset import Dataset
from SecuML.Experiment.ActiveLearningExperiment import ActiveLearningExperiment
from SecuML.Tools import mysql_tools

if __name__ == '__main__':

    description  = 'Interactive Labeling Procedure'
    parser = argparse.ArgumentParser(description = description,
            formatter_class = argparse.RawTextHelpFormatter)
    labeling_strategies = ['Ilab', 'RandomSampling', 'UncertaintySampling', 'CesaBianchi', 'Aladin', 'Gornitz']
    subparsers = parser.add_subparsers(dest = 'strategy')
    factory = ActiveLearningConfFactory.getFactory()
    for strategy in labeling_strategies:
        strategy_parser = subparsers.add_parser(strategy)
        factory.generateParser(strategy, strategy_parser)
    args = parser.parse_args()

    engine, session = mysql_tools.getSecuMLSession()
    db_tables.createTables(engine)

    load_dataset = Dataset(args.project, args.dataset, session)
    if not load_dataset.isLoaded():
        load_dataset.load()

    try:
        experiment = ActiveLearningExperiment(args.project, args.dataset, session)
        experiment.setFeaturesFilenames(args.features_files)
        active_learning_conf = factory.fromArgs(args.strategy, args, experiment)
        experiment.setConfiguration(active_learning_conf)
        experiment.checkInputParams()
        experiment.initLabels(args.init_labels_file)
        experiment.export()
    except InvalidInputArguments as e:
        print e
        mysql_tools.closeSqlAlchemySession(session)
        sys.exit()

    iterations = Iterations(experiment)
    if not args.auto:
        from CeleryApp.app import secumlworker
        from CeleryApp.activeLearningTasks import IterationTask
        options = {}
        # bind iterations object to IterationTask class
        iterations.runNextIteration()
        IterationTask.iteration_object = iterations
        # Start worker
        secumlworker.enable_config_fromcmdline = False
        secumlworker.run(**options)
    else:
        iterations.runIterations()

    mysql_tools.closeSqlAlchemySession(session)
