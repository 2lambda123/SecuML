#!/usr/bin/python2

## SecuML
## Copyright (C) 2016  ANSSI
##
## SecuML is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2 of the License, or
## (at your option) any later version.
##
## SecuML is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License along
## with SecuML. If not, see <http://www.gnu.org/licenses/>.

import argparse
import matplotlib
matplotlib.use('Agg')

from SecuML.ActiveLearning.Configuration import ActiveLearningConfFactory
from SecuML.ActiveLearning.Datasets import Datasets
from SecuML.ActiveLearning.Iterations import Iterations
from SecuML.Classification.Configuration import ClassifierConfFactory
from SecuML.Data.Dataset import Dataset
from SecuML.Experiment.ActiveLearningExperiment import ActiveLearningExperiment

from SecuML.Tools import mysql_tools

if __name__ == '__main__':
    description  = 'Interactive Labeling Procedure'
    parser = argparse.ArgumentParser(description = description,
            formatter_class = argparse.RawTextHelpFormatter)

    parser.add_argument('project')
    parser.add_argument('dataset')
    parser.add_argument('--features', '-f',
            dest = 'features_files',
            nargs = '+',
            required = False,
            default = ['features.csv'],
            help = 'CSV files containing the features.')

    ## Active learning parameters
    al_group = parser.add_argument_group(
            'Active learning parameters')
    al_group.add_argument('--init-labels-file',
            default = 'init_labels.csv',
            help = 'CSV file containing the initial labels used to learn the first ' +
            'supervised detection model.')
    al_group.add_argument('--budget',
            type = int,
            default = 2000,
            help = 'Total number of annotations asked from the user during the labeling procedure.')
    al_group.add_argument('--num-annotations',
            type = int,
            default = 100,
            help = 'Number of annotations asked from the user at each iteration.')
    auto_help  = 'When set to True, the annotation queries are answered automatically by an oracle '
    auto_help += 'with the ground truth labels stored in true_labels.csv. '
    auto_help += '\nOtherwise, the user must answer some annotation queries in the web interface '
    auto_help += 'at each iteration.'
    al_group.add_argument('--auto',
            dest = 'auto',
            action = 'store_true',
            default = False,
            help = auto_help)

    ## Supervised learning parameters
    supervised_group = parser.add_argument_group(
            'Supervised learning parameters')
    supervised_group.add_argument('--model-class',
            choices = ['LogisticRegression', 'Svc', 'Sssvdd', 'SssvddOriginal'],
            default = 'LogisticRegression')
    supervised_group.add_argument('--num-folds',
            type = int,
            default = 4)
    sample_weight_help  = 'When set to True, the detection model is learned with '
    sample_weight_help += 'sample weights inverse to the proportion of the family '
    sample_weight_help += 'in the dataset. Useless if the families are not specified.'
    supervised_group.add_argument('--sample-weight',
            action = 'store_true',
            default = False,
            help = sample_weight_help)
    supervised_group.add_argument('--validation-dataset',
            default = None,
            help = 'The validation dataset must contain true labels.')

    args = parser.parse_args()

    db, cursor = mysql_tools.getDbConnection()
    ## Check whether the dataset has been loaded before
    if not mysql_tools.databaseExists(cursor, args.project, args.dataset):
        load_dataset = Dataset(args.project, args.dataset,
                db, cursor)
        load_dataset.load()

    supervised_args = {}
    supervised_args['num_folds']            = args.num_folds
    supervised_args['sample_weight']        = args.sample_weight
    supervised_args['families_supervision'] = False
    supervised_args['alerts_conf']          = None
    conf = ClassifierConfFactory.getFactory().fromParam(
            args.model_class, supervised_args)
    conf.setUnlabeled(labels_annotations = 'annotations')

    active_learning_args = {}
    active_learning_args['num_annotations']   = args.num_annotations
    active_learning_conf = ActiveLearningConfFactory.getFactory().fromParam(
            'RandomSampling',
            active_learning_args)
    experiment = ActiveLearningExperiment(args.project, args.dataset, db, cursor)
    experiment.setConfiguration(active_learning_conf)

    experiment.setFeaturesFilenames(args.features_files)
    experiment.setValidation(args.validation_dataset)
    experiment.setClassifierConf(conf)
    experiment.initLabels(args.init_labels_file)
    experiment.export()

    datasets = Datasets(experiment)
    iterations = Iterations(experiment, datasets, args.budget, args.auto)
    iterations.runIterations()

    mysql_tools.closeDb(db, cursor)
