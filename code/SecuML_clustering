#!/usr/bin/python2

## SecuML
## Copyright (C) 2016  ANSSI
##
## SecuML is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2 of the License, or
## (at your option) any later version.
##
## SecuML is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License along
## with SecuML. If not, see <http://www.gnu.org/licenses/>.

import argparse
import numpy as np
import matplotlib
matplotlib.use('Agg')

from SecuML.Data.Dataset import Dataset
from SecuML.Data.Instances import Instances
from SecuML.Experiment.ClusteringExperiment \
        import ClusteringExperiment

from SecuML.UnsupervisedLearning.Configuration \
        import ClusteringConfFactory, ProjectionConfFactory

from SecuML.Tools import mysql_tools

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
            description = 'Clustering of the data for data exploration.')
    parser.add_argument('project')
    parser.add_argument('dataset')
    parser.add_argument('--features', '-f',
            dest = 'features_files',
            nargs = '+',
            required = False,
            default = ['features.csv'],
            help = 'CSV files containing the features.')
    parser.add_argument('--clustering-algo',
            default = 'Kmeans',
            choices = ['Kmeans', 'GaussianMixture'],
            help = 'The clustering algorithm. Kmeans by default.')
    parser.add_argument('--num-clusters',
            type = int,
            default = 4)
    label_help  = 'The clustering is built from all the instances in the dataset, '
    label_help += 'or only from the benign or malicious ones. '
    label_help += 'By default, the clustering is built from all the instances. '
    label_help += 'The malicious and benign instances are selected according to '
    label_help += 'the ground truth labels stored in labels/true_labels.csv.'
    parser.add_argument('--label', 
            choices = ['all', 'malicious', 'benign'],
            default = 'all',
            help = label_help)
    projection_group = parser.add_argument_group(
            'Projection parameters')
    projection_group.add_argument('--projection-algo',
            choices = ['Pca', 'Lda', 'Lmnn', 'Nca', None],
            default = None,
            help = 'Projection performed before building the clustering. ' + 
            'By default the instances are not projected.')
    projection_group.add_argument('--sublabels-supervision',
            action = 'store_true',
            default = False,
            help = 'When set to True, the semi-supervision is based on the sublabels ' + 
            'instead of the labels. Useless if an unsupervised projection method is used.')

    projection_group.add_argument('--labels', '-l',
            dest = 'labels_file',
            default = None,
            help = 'CSV file containing the labels of some instances. ' +
            'These labels are used for semi-supervised projections.')
    
    args = parser.parse_args()
    db, cursor = mysql_tools.getDbConnection()
    ## Check whether the dataset has been loaded before
    if not mysql_tools.databaseExists(cursor, args.project, args.dataset):
        load_dataset = Dataset(args.project, args.dataset,
                db, cursor)
        load_dataset.load()
    
    projection_conf = None
    if args.projection_algo is not None:
        projection_conf = ProjectionConfFactory.getFactory().fromParam(
                args.projection_algo, sublabels_supervision = args.sublabels_supervision)
    clustering_conf = ClusteringConfFactory.getFactory().fromParam(
            args.clustering_algo,
            args.num_clusters, 
            projection_conf = projection_conf)
    
    experiment = ClusteringExperiment(args.project, args.dataset, db, cursor, 
            clustering_conf)
    experiment.setFeaturesFilenames(args.features_files)
    experiment.initLabels(args.labels_file)
    experiment.export()
    
    instances = Instances()
    instances.initFromExperiment(experiment)
    if args.label != 'all':
        if args.label == 'malicious':
            selected_ids = instances.getMaliciousIds(true_labels = True)
        elif args.label == 'benign':
            selected_ids = instances.getBenignIds(true_labels = True)
        instances = instances.getInstancesFromIds(selected_ids)
    
    clustering = clustering_conf.algo(instances, experiment)
    clustering.run(instances)
    
    mysql_tools.closeDb(db, cursor)
