#!/usr/bin/python2

## SecuML
## Copyright (C) 2016  ANSSI
##
## SecuML is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2 of the License, or
## (at your option) any later version.
##
## SecuML is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License along
## with SecuML. If not, see <http://www.gnu.org/licenses/>.

import argparse
import matplotlib
matplotlib.use('Agg')

from SecuML.Data.Dataset import Dataset
from SecuML.Experiment.ProjectionExperiment import ProjectionExperiment

from SecuML.Projection.Configuration import ProjectionConfFactory

from SecuML.Tools import mysql_tools

if __name__ == '__main__':

    parser = argparse.ArgumentParser(
            description = 'Projection of the data for data visualization.')
    parser.add_argument('project')
    parser.add_argument('dataset')
    parser.add_argument('--features', '-f',
            dest = 'features_files',
            nargs = '+',
            required = False,
            default = ['features.csv'],
            help = 'CSV files containing the features.')
    parser.add_argument('--labels', '-l',
            dest = 'labels_file',
            default = None,
            help = 'CSV file containing the labels of some instances.')
    parser.add_argument('--algo',
            choices = ['Pca', 'Rca', 'Lda', 'Lmnn', 'Nca', 'Itml'],
            help = 'The projection algorithm. Pca by default.',
            default = 'Pca')
    parser.add_argument('--families-supervision',
            action = 'store_true',
            default = False,
            help = 'When set to True, the semi supervision is based on the families' +
            'instead of the binary labels (Malicious vs. Benign). Useless if an unsupervised projection method is used.')
    parser.add_argument('--num-components',
            type = int,
            default = None)

    args = parser.parse_args()
    db, cursor = mysql_tools.getDbConnection()
    ## Check whether the dataset has been loaded before
    if not mysql_tools.databaseExists(cursor, args.project, args.dataset):
        load_dataset = Dataset(args.project, args.dataset,
                db, cursor)
        load_dataset.load()

    experiment = ProjectionExperiment(args.project, args.dataset, db, cursor)
    experiment.setFeaturesFilenames(args.features_files)

    projection_args = {}
    projection_args['num_components']        = args.num_components
    projection_args['families_supervision'] = args.families_supervision
    conf = ProjectionConfFactory.getFactory().fromParam(args.algo, projection_args)
    experiment.setConf(conf)
    experiment.initLabels(args.labels_file)
    experiment.export()

    projection = conf.algo(experiment)
    projection.run(visu = True, performance = True)

    mysql_tools.closeDb(db, cursor)
